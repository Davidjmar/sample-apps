{"version":3,"sources":["loading.svg","Result.js","Loading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Result","props","age","react_default","a","createElement","toFixed","Loading","className","src","loading","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRef","webcam","submitPhoto","photo","setState","photoData","image","axios","post","then","response","console","log","data","success","result","estimated_age","catch","err","capture","imageSrc","getScreenshot","slice","update","width","window","innerWidth","height","innerHeight","state","test","bind","assertThisInitialized","addEventListener","removeEventListener","videoConstraints","facingMode","src_Loading","react_webcam_default","audio","ref","screenshotFormat","onClick","src_Result","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8abef770.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.4792c04c.svg\";","import React from 'react';\n\nconst Result = (props) => {\n  \n  if (props.age === false){\n    return (\n      <div>\n        <h3>No face found</h3>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n        <h3>Age Prediction:</h3>\n        <h2>{props.age.toFixed(0)}</h2>\n    </div>\n  )\n  \n}\n\nexport default Result;","import React from 'react';\nimport loading from \"./loading.svg\";\n \nconst Loading = () => (\n   <div className=\"spinner\">\n       <img src={loading} alt=\"Loading\" />\n   </div>\n);\n \nexport default Loading;","import React, { Component } from \"react\";\nimport Webcam from \"react-webcam\";\nimport axios from \"axios\";\nimport Result from './Result';\nimport Loading from './Loading';\n\nimport \"./App.css\"\n \nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      width: 0,\n      height: 0,\n      age: false,\n      loading: '',\n      result: false,\n      test: '',\n    }\n    this.setRef = this.setRef.bind(this)\n    this.capture = this.capture.bind(this)\n    window.addEventListener(\"resize\", this.update)\n    this.submitPhoto = this.submitPhoto.bind(this)\n  }\n\n  setRef = webcam => {\n    this.webcam = webcam;\n  }\n\n  submitPhoto = photo => {\n    this.setState({\n      loading: true\n    })\n\n    const photoData = {\n      image: photo\n    }\n\n    // console.log(photoData)\n\n    axios.post('/predict', photoData)\n      .then(response => {\n        console.log(response)\n        if(response.data.success){\n          this.setState({\n            result: true,\n            age: response.data.data[0].estimated_age,\n            loading: false,\n          })\n        } else {\n          this.setState({\n            result: true,\n            age: false,\n            loading: false,\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n \n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    \n    this.submitPhoto(imageSrc.slice(23))\n  }\n\n  update = () => {\n    this.setState({ \n      width: window.innerWidth, \n      height: window.innerHeight\n    })\n  }\n\n  componentDidMount() {\n    this.update()\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener('resize', this.update);\n  }\n \n  render() {\n    const videoConstraints = {\n      width: this.state.width,\n      height: this.state.height,\n      facingMode: \"user\"\n    }\n\n    if(this.state.loading) {\n      return (\n        <div>\n          <Loading />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"webcam\">\n          <Webcam\n            audio={false}\n            height={this.state.height}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={this.state.width}\n            videoConstraints={videoConstraints}\n          />\n          <button onClick={this.capture}>Capture photo</button>\n          { this.state.result && <Result age={this.state.age} /> }\n        </div>\n    )}\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}